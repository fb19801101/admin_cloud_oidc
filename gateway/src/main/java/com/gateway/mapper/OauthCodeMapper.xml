<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gateway.mapper.OauthCodeMapper">
  <resultMap id="BaseResultMap" type="com.gateway.entity.OauthCode">
    <id column="code" jdbcType="VARCHAR" property="code" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.gateway.entity.OauthCode">
    <result column="authentication" jdbcType="LONGVARBINARY" property="authentication" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Model_Where_Clause">
    <where>
      <if test="record.code != null">
        code = #{record.code,jdbcType=VARCHAR}
      </if>
      <if test="record.createTime != null">
        and create_time = #{record.createTime,jdbcType=TIMESTAMP}
      </if>
      <if test="record.authentication != null">
        and authentication = #{record.authentication,jdbcType=LONGVARBINARY}
      </if>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Model_Query_Clause">
    <where>
      <if test="record.code != null">
        code like concat('%', #{record.code,jdbcType=VARCHAR}, '%')
      </if>
      <if test="record.create_time != null">
        and create_time like concat('%', #{record.create_time,jdbcType=TIMESTAMP}, '%')
      </if>
      <if test="record.authentication != null">
        and authentication like concat('%', #{record.authentication,jdbcType=LONGVARBINARY}, '%')
      </if>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Model_Clause_Offset">
	  <if test="_parameter != null">
	    <if test="_parameter.containsKey('limit') and limit != null">
	      <choose>
	        <when test="_parameter.containsKey('offset') and offset != null">
	          order by code asc limit #{offset}, #{limit};
	        </when>
	        <otherwise>
	          order by code asc limit  #{limit};
	        </otherwise>
	      </choose>
	    </if>
    </if>
  </sql>
  <sql id="Model_Clause_Order">
    <if test="_parameter != null">
      <choose>
        <when test="_parameter.containsKey('field') and field != null">
          order by ${field} asc;
        </when>
        <otherwise>
          order by code asc;
        </otherwise>
      </choose>
    </if>
  </sql>
  <sql id="Base_Column_List">
    code, create_time
  </sql>
  <sql id="Blob_Column_List">
    authentication
  </sql>
  <sql id="Param_Column_List">
    <choose>
      <when test="_parameter != null">
        <if test="_parameter.containsKey('fields') and fields != null">
          ${fields}
        </if>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
  </sql>
  <sql id="Param_Where_Clause_Like">
    <if test="_parameter != null">
      <if test="_parameter.containsKey('field') and field != null">
        <where>
          <if test="_parameter.containsKey('value') and value != null">
            ${field} like concat('%', #{value}, '%')
          </if>
        </where>
        <if test="_parameter.containsKey('limit') and limit != null">
          <choose>
            <when test="_parameter.containsKey('offset') and offset != null">
              order by ${field} asc limit #{offset}, #{limit};
            </when>
            <otherwise>
              order by ${field} asc limit  #{limit};
            </otherwise>
          </choose>
        </if>
      </if>
    </if>
  </sql>
  <sql id="Param_Where_Clause_Equal">
    <if test="_parameter != null">
      <if test="_parameter.containsKey('field') and field != null">
        <where>
          <if test="_parameter.containsKey('value') and value != null">
            ${field} = #{value}
          </if>
          <if test="_parameter.containsKey('value1') and _parameter.containsKey('value2')">
            <if test="value1 != null and value2 != null">
              ${field} between #{value1} and #{value2}
            </if>
          </if>
        </where>
        <if test="_parameter.containsKey('limit') and limit != null">
          <choose>
            <when test="_parameter.containsKey('offset') and offset != null">
              order by ${field} asc limit #{offset}, #{limit};
            </when>
            <otherwise>
              order by ${field} asc limit  #{limit};
            </otherwise>
          </choose>
        </if>
      </if>
    </if>
  </sql>
  <sql id="Param_Where_Clause_Sql">
    <where>
      <choose>
        <when test="_parameter != null">
          <if test="_parameter.containsKey('sql') and sql != null">
            ${sql}
          </if>
        </when>
        <otherwise>
          id is null
        </otherwise>
      </choose>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.gateway.entity.OauthCodeExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from oauth_code
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.gateway.entity.OauthCodeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from oauth_code
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from oauth_code
    where code = #{code,jdbcType=VARCHAR}
  </select>
  <select id="selectByMinPrimaryKey" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from oauth_code
    where id = (select min(id) from oauth_code)
  </select>
  <select id="selectByMaxPrimaryKey" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from oauth_code
    where id = (select max(id) from oauth_code)
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from oauth_code
    where code = #{code,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.gateway.entity.OauthCodeExample">
    delete from oauth_code
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <delete id="deleteAllModel">
    delete from oauth_code
  </delete>
  <insert id="insert" keyColumn="code" keyProperty="code" parameterType="com.gateway.entity.OauthCode" useGeneratedKeys="true">
    insert into oauth_code (code, create_time, authentication
      )
    values (#{code,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{authentication,jdbcType=LONGVARBINARY}
      )
  </insert>
  <insert id="insertSelective" keyColumn="code" keyProperty="code" parameterType="com.gateway.entity.OauthCode" useGeneratedKeys="true">
    insert into oauth_code
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="code != null">
        code,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="authentication != null">
        authentication,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="code != null">
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="authentication != null">
        #{authentication,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.gateway.entity.OauthCodeExample" resultType="java.lang.Long">
    select count(*) from oauth_code
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="countByModel" parameterType="com.gateway.entity.OauthCode" resultType="java.lang.Long">
    select count(*) from oauth_code
    <if test="_parameter != null">
      <include refid="Model_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update oauth_code
    <set>
      <if test="record.code != null">
        code = #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.authentication != null">
        authentication = #{record.authentication,jdbcType=LONGVARBINARY},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update oauth_code
    set code = #{record.code,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      authentication = #{record.authentication,jdbcType=LONGVARBINARY}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update oauth_code
    set code = #{record.code,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.gateway.entity.OauthCode">
    update oauth_code
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="authentication != null">
        authentication = #{authentication,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where code = #{code,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.gateway.entity.OauthCode">
    update oauth_code
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      authentication = #{authentication,jdbcType=LONGVARBINARY}
    where code = #{code,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.gateway.entity.OauthCode">
    update oauth_code
    set create_time = #{createTime,jdbcType=TIMESTAMP}
    where code = #{code,jdbcType=VARCHAR}
  </update>
  <select id="selectAllModel" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from oauth_code
    <include refid="Model_Clause_Offset" />
  </select>
  <select id="countAllModel" resultType="java.lang.Long">
    select count(*) from oauth_code
  </select>
  <select id="selectByParam" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from oauth_code
    <include refid="Model_Where_Clause" />
  </select>
  <select id="countBySelectParam" parameterType="map" resultType="java.lang.Long">
    select count(*) from oauth_code
    <include refid="Model_Where_Clause" />
  </select>
  <select id="queryByParam" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from oauth_code
    <include refid="Model_Query_Clause" />
  </select>
  <select id="countByQueryParam" parameterType="map" resultType="java.lang.Long">
    select count(*) from oauth_code
    <include refid="Model_Query_Clause" />
  </select>
  <select id="selectByCondition" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from oauth_code
    <include refid="Param_Where_Clause_Equal" />
  </select>
  <select id="countBySelectCondition" resultType="java.lang.Long">
    select count(*) from oauth_code
    <include refid="Param_Where_Clause_Equal" />
  </select>
  <select id="queryByCondition" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from oauth_code
    <include refid="Param_Where_Clause_Like" />
  </select>
  <select id="countByQueryCondition" resultType="java.lang.Long">
    select count(*) from oauth_code
    <include refid="Param_Where_Clause_Like" />
  </select>
  <select id="selectFieldsByParam" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from oauth_code
    <include refid="Model_Where_Clause" />
  </select>
  <select id="queryFieldsByParam" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from oauth_code
    <include refid="Model_Query_Clause" />
  </select>
  <select id="selectFieldsByCondition" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from oauth_code
    <include refid="Param_Where_Clause_Equal" />
  </select>
  <select id="queryFieldsByCondition" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from oauth_code
    <include refid="Param_Where_Clause_Like" />
  </select>
  <select id="selectBySql" resultMap="BaseResultMap" statementType="STATEMENT">
    select
    <include refid="Base_Column_List" />
    from oauth_code
    <include refid="Param_Where_Clause_Sql" />
  </select>
  <select id="selectFieldsBySql" resultMap="BaseResultMap" statementType="STATEMENT">
    select
    <include refid="Param_Column_List" />
    from oauth_code
    <include refid="Param_Where_Clause_Sql" />
  </select>
</mapper>